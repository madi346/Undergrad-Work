/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * arrayDemoForm.java
 *
 * Created on Oct 24, 2009, 10:59:13 PM
 */

package arraydemo;

import java.util.Random;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author John
 */
public class arrayDemoForm extends javax.swing.JFrame {
  // list model object for the list box
  DefaultListModel myList = new DefaultListModel();
  
  // class level constant
    private final int MAX_SIZE = 10;
    /** Creates new form arrayDemoForm */
    public arrayDemoForm() {
        initComponents();
        // Add this line to set the list model
        lstResult.setModel(myList);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnInit0 = new javax.swing.JButton();
        btnInitRandom = new javax.swing.JButton();
        btnInitConstant = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        btnForEach = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnParallelSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstResult = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Results");

        btnInit0.setText("Init Zero");
        btnInit0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInit0ActionPerformed(evt);
            }
        });

        btnInitRandom.setText("Init Random");
        btnInitRandom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInitRandomActionPerformed(evt);
            }
        });

        btnInitConstant.setText("Init Constant");
        btnInitConstant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInitConstantActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnForEach.setText("For Each");
        btnForEach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnForEachActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnParallelSearch.setText("Parallel Array");
        btnParallelSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnParallelSearchActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(lstResult);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnForEach, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnInitRandom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnInit0, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnInitConstant, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnParallelSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jLabel1))
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnInit0)
                        .addGap(11, 11, 11)
                        .addComponent(btnInitRandom)
                        .addGap(18, 18, 18)
                        .addComponent(btnInitConstant)
                        .addGap(18, 18, 18)
                        .addComponent(btnForEach)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch)
                        .addGap(18, 18, 18)
                        .addComponent(btnParallelSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addComponent(btnExit))
                    .addComponent(jScrollPane1))
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnInit0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInit0ActionPerformed
       // TODO add your handling code here:
      int numbers[] = new int[MAX_SIZE];
      int i = 0;

      // call our method to initialize the array
      initArray(numbers,0);
      displayList(numbers);
    }//GEN-LAST:event_btnInit0ActionPerformed

    private void btnForEachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnForEachActionPerformed
      final int MAX_RANDOM_VALUE = 100;
      int numbers[] = new int[MAX_SIZE];

      // call our method to initialize the array
      initArrayRandom(numbers,MAX_RANDOM_VALUE);
      
      myList.removeAllElements();

      // use a for/each loop to display the initialized array
      for (int number : numbers) {
        myList.addElement(number);
      }
    }//GEN-LAST:event_btnForEachActionPerformed

    private void btnInitConstantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInitConstantActionPerformed
      // declare & initialize an array of constants
      final int[] numbers = {3,8,12,14,18,7,2,9,5,1};
      displayList(numbers);
    }//GEN-LAST:event_btnInitConstantActionPerformed

    private void btnInitRandomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInitRandomActionPerformed
       final int MAX_RANDOM_VALUE = 100;
      int numbers[] = new int[MAX_SIZE];

      // call our method to initialize the array
      initArrayRandom(numbers,MAX_RANDOM_VALUE);
      displayList(numbers);
    }//GEN-LAST:event_btnInitRandomActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
       System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

  private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
    final String[] animals = {"cat", "dog", "rabbit", "horse", "goat", "lizard"};
    String searchVal = "";
    String message = "";
    int i = 0;
    boolean found = false;

    // prompt the user for an animal to find
    searchVal = JOptionPane.showInputDialog("Find what animal?");
    if (searchVal == null) {
      searchVal = "";
    }
    
    // search only if the search value is not an empty string
    if (!searchVal.equals("")) {
      // note compound while loop condition
      while(i < animals.length && !found) {
        if (animals[i].equalsIgnoreCase(searchVal)) {
          // we got a match - set our found flag
          found = true;
        }
        i++; // while loop so make sure we increment the loop counter
      } // end while
      
      // post loop processing...
      if (found) {
        message = "Found animal " + searchVal;
      }
      else {
        message = searchVal + " was not found.";
      }
      
      // provide feedback to the user whether or not the search was successful
      JOptionPane.showMessageDialog(null,message, "Array Demo", 
          JOptionPane.INFORMATION_MESSAGE);
    }
    else {
      // tell the user why we didn't do the search
      JOptionPane.showMessageDialog(null, "No value was entered.", "Array Demo", 
          JOptionPane.INFORMATION_MESSAGE);
    }
  }//GEN-LAST:event_btnSearchActionPerformed

  private void btnParallelSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnParallelSearchActionPerformed
    // more realistically, this data would come from a file or database
    final String[] animals = {"cat", "dog", "rabbit", "horse", "goat", "lizard"};
    final int[] qtyAvailable = {5, 8, 20, 1, 2, 3};
    String searchVal = "";
    String message = "";
    int i = 0;
    int qty = 0;
    boolean found = false;

    // prompt the user for an animal to find
    searchVal = JOptionPane.showInputDialog("Find what animal?");
    if (searchVal == null) {
      searchVal = "";
    }
    
    // search only if the search value is not an empty string
    if (!searchVal.equals("")) {
      // note compound while loop condition
      while(i < animals.length && !found) {
        if (animals[i].equalsIgnoreCase(searchVal)) {
          // we got a match - get the qty and set our found flag
          qty = qtyAvailable[i];
          found = true;
        }
        i++; // while loop so make sure we increment the loop counter
      } // end while
      
      // post loop processing...
      if (found) {
        message = "Found " + searchVal + ". We have " + Integer.toString(qty) +
          " available.";
      }
      else {
        message = searchVal + " was not found.";
      }
      
      // provide feedback to the user whether or not the search was successful
      JOptionPane.showMessageDialog(null,message, "Array Demo", 
          JOptionPane.INFORMATION_MESSAGE);
    }
    else {
      // tell the user why we didn't do the search
      JOptionPane.showMessageDialog(null, "No value was entered.", "Array Demo", 
          JOptionPane.INFORMATION_MESSAGE);
    }
  }//GEN-LAST:event_btnParallelSearchActionPerformed

  
  // generic method to display an array of integers in a list box
  private void displayList(int[] items) {
    int i = 0;

    // first clear the list
    myList.removeAllElements();

    // first make sure we have a valid array with data
    if (items != null && items.length > 0) {
      int max = items.length;
      
      // Now loop and display each item in the array
      for (i = 0; i < max; i++) {
        myList.addElement(items[i]);
      } // end for
    } // end if
  } // end displayList
  
  
    private void initArrayRandom(int[] anArray, int maxRandVal){
    	int i;
    	int maxLen = anArray.length;

      // instantiate a new random number generator object
    	Random randomGen = new Random();
    	for (i = 0; i < maxLen; i++){
        // generate a random numer and place it in the array
    		anArray[i] = randomGen.nextInt(maxRandVal);
    	}
    	return;
    }

    private void initArray(int values[], int initialVal) {
      int len = 0;
      int i = 0;

      // safety check to make sure we don't have a null array
      if (values != null) {
        len = values.length; // determine length of the array
        for (i = 0; i < len; i++) {
          values[i] = initialVal;
        }
      }
      return;
    }

    
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new arrayDemoForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnForEach;
    private javax.swing.JButton btnInit0;
    private javax.swing.JButton btnInitConstant;
    private javax.swing.JButton btnInitRandom;
    private javax.swing.JButton btnParallelSearch;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList lstResult;
    // End of variables declaration//GEN-END:variables

}
